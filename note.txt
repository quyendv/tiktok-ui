- Video initiate: có cách sửa lỗi buộc dùng ssh key thay vì https, khi nào gặp thì xem: https://fullstack.edu.vn/learning/reactjs?id=0d56f3e5-e529-4dc2-bad7-3a7789204335
- Customize cra: https://fullstack.edu.vn/learning/reactjs?id=18bff2bc-6918-4ff6-af56-50a1c2d8398b
    + npm i -D customize-cra react-app-rewired
    + config-overrides.js
    + sửa package.json: https://github.com/timarney/react-app-rewired/#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts-for-start-build-and-test
- babel-plugin-module-resolver: tránh việc import '../../../.....' quá dài
        -> https://fullstack.edu.vn/learning/reactjs?id=a15493ae-8244-4f87-9861-6710af2c2b5a
        -> https://www.npmjs.com/package/babel-plugin-module-resolver
    + Cài: npm install --save-dev babel-plugin-module-resolver
    + tạo .babelrc
    + vấn đề import kiểu đó giống import thư viện nên config khác đi
    + config theo video: https://youtu.be/wwGkGi1WFgg?t=289
        -> sau import nó sẽ lấy từ root và chỉ cần '~/App' nếu config dấu '~'
        -> chú ý rằng ~ chỉ đại diện cho ./src nên giúp ta dễ import file ở ngay cấp 1 src từ file cấp sâu trong src thôi
        -> với kiểu ../../ vân vân thì ta nên đổi thành ~/ còn kiểu ./ thì thôi thay ~/ làm gì
    + Editors autocompletion: https://youtu.be/wwGkGi1WFgg?t=395
        -> jsconfig.json rồi config theo video
    + Nạp babelrc vào webpack: https://youtu.be/wwGkGi1WFgg?t=484
        -> sửa file config-overrides.js theo video và docs: https://github.com/arackaf/customize-cra/blob/master/api.md#usebabelrc
        -> chú ý có lỗi nhận nhầm thành hooks thì disable nó đi
- prettier: https://fullstack.edu.vn/learning/reactjs?id=4149692d-7c4b-4fca-b7d1-7cdf4a28c04a
    -> tạo .prettierrc rồi copy rule vào, như a sơn cũng được (đầy đủ hơn trong setting, sau nên chuyển rule trong setting ra file .prettierrc vào cd/~)
    -> Thêm .vscode/setting.json rồi thêm config vào
    ==> máy cá nhân setup hết rồi nên có thể k cần, nhưng làm nhóm thì cần
- Cấu hình SASS/CSS:
    + Tạo components/GlobalStyles ...
    + Thêm <GlobalStyles></GlobalStyles> vào index.js
    + cài npm i -D sass
    + clear logo, index.css, App.css và import liên quan, để <h1>React App</h1> trong <App/> thôi
    + reset css: ta k code chay mà tải `npm install --save normalize.css`, link: https://github.com/necolas/normalize.css
        -> sau đó `@import 'normalize.css'` trong file GlobalStyles.scss
    + set Default:
        -> font: vào GlobalStyles @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');
        -> tạo body (trong GlobalStyles luôn) paste font-family vào: font-family: 'Roboto', sans-serif;
        -> Dùng kĩ thuật font-size 62.5% cho html rồi font-size 1.6rem cho body để trả lại (62.5% để tiện css kích thước theo rem)
        -> * { box-sizing: border-box, m0, p0 }
        -> Thêm line-height 1.5 và text-rendering: optimizeSpeed cho body (kiến thức mới)
        -> Thêm biến vào :root {} nếu cần
    ==> Tóm lại file GlobalStyles.scss có:
                @import 'normalize.css';
                @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');

                                :root {
                    --primary: #fe2c55;
                    --black: black;
                    --text-color: #333;
                    
                    // Default Layout
                    --default-layout-header-height: 60px;
                    --default-layout-width: 1150px;
                }

                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                html {
                    font-size: 62.5%;
                }

                body {
                    font-family: 'Roboto', sans-serif;
                    font-size: 1.6rem;
                    line-height: 1.5;
                    text-rendering: optimizeSpeed;
                }

                button, input, [tabindex] {
                    border: none;
                    outline: none;
                }

                a[href] {
                    color: var(--text-color);
                    text-decoration: none;
                }

- Cấu hình Router/Layout:
    1. Phân tích layout chính: https://youtu.be/FwTQ0yoF0_g?t=106
    2. Cài đặt react-router-dom: `npm i react-router-dom`
        -> tạo pages/Home & Following như đã học bài Router
        -> Thêm Router vào (lần này thêm ở file App.js chứ k phải index.js): https://youtu.be/FwTQ0yoF0_g?t=508
    3. Đưa cấu hình routea ra ngoài: https://youtu.be/FwTQ0yoF0_g?t=613
        + Ít pages thì để x10 lên vẫn bth, tuy nhiên cần biết cách đưa ra ngoài
        + Tạo routes/index.js, trong đó chia publicRoutes và privateRoutes chia pages k cần và cần đăng nhập mới xem được, chú ý khi import các thứ nên dùng ~luôn đi để khi chuyển vị trí code đi sang file khác vẫn đúng
        + trong App import ra publicRoutes rồi map nó ra, -> xem video rõ hơn
    4. Xây dựng cơ chế tải layout
        + thêm folder Layout trong components có folder DefaultLayout chứa index.js kèm các folder Header, Sidebar, ...
        + xem video + code dễ hiểu hơn
        + tối ưu import Layout: https://youtu.be/FwTQ0yoF0_g?t=1215
        + Tiếp theo là setup layout trong App
        + set up page layout null -> Fragment
        + Tối ưu page upload còn chứa header nữa: https://youtu.be/FwTQ0yoF0_g?t=1521
            -> tự import header vào layout
            -> set layout trong routes/index.js là HeaderOnly
        => vấn đề cuối: HeaderOnly và DefaultLayout đều có foller Header -> components chung này k nên đưa vào src/components (nơi chứa các components chung dùng ở đâu cũng được) mà đưa vào src/components/Layout/components (chứa components chung của 2 layout đó thôi)

*** Xây dựng header:
    - cài `npm i classnames`, sau đó import ... from 'classnames/bind' trong file module.scss (chú ý /bind nếu k sẽ k work đâu)
        -> từ đó đặt cx = classNames.bind(styles) vào và ta có thể đặt <h2 className={cx('post-item')}></h2> hoặc nếu k vẫn có thể dùng ={style['post-item']} thôi
    - còn lại tự xem, chủ yếu css thôi

    ** UI header #1:
        - copy logo: https://youtu.be/hFK4okw-XYs?t=129
            -> tìm đến thẻ symbol với #... mà ta tìm đc ấy, xong copy outerHTML, xóa symbol, format là được
            -> tạo thêm assets/images/logo.svg rồi tạo index export ra. Chú ý logo: require('~/assets/images/logo.svg').default,
            -> cách lấy svg về thử: https://youtu.be/hFK4okw-XYs?t=459
        - Icons:
            -> link copy package fontawesome: https://fullstack.edu.vn/learning/reactjs?id=894b971b-3bc9-478e-ba01-ba4802213cc4#font-deps
                    "@fortawesome/fontawesome-svg-core": "^1.3.0",
                    "@fortawesome/free-brands-svg-icons": "^6.0.0",
                    "@fortawesome/free-regular-svg-icons": "^6.0.0",
                    "@fortawesome/free-solid-svg-icons": "^6.0.0",
                    "@fortawesome/react-fontawesome": "^0.1.17",
                -> thêm vào package.json dependencies rồi npm i
                -> Cách dùng: https://youtu.be/hFK4okw-XYs?t=1104
        - CSS header:
            + mã màu k nên để cứng mà nên đặt biến sau làm theme mới dễ
            + Đối với thẻ div mà chứa element ở 2 đầu thì nên padding 1 bên, chứ nếu k bị lệch: https://youtu.be/hFK4okw-XYs?t=1919
            + thêm vào GlobalStyles:
                    button, input, [tabindex] {
                        border: none;
                        outline: none;
                    }

                    a[href] {
                        color: var(--text-color);
                        text-decoration: none;
                    }
            + thuộc tính mới học: focus-within (nhận css khi nó hoặc thẻ con trong nó bị focus)
            + caret color
            -> Lưu ý scss có thể phân cấp nhưng k lạm dụng mà đâm sau quá 2 cấp, nên tách ra nếu sâu hơn để dễ bảo trì
            + css mới :not(:placeholder-shonw), dùng khi placeholder k được hiển thị (khi nhập): https://stackoverflow.com/questions/8639282/notempty-css-selector-is-not-working
    ** UI Header #2:
        - Cài tippy: `npm i @tippyjs/react` rồi đọc cách dùng: https://github.com/atomiks/tippyjs-react#-usage
            -> demo đoạn text bên dưới khi hover vào element: https://youtu.be/6lB3HhjEr7E?t=222
            -> <Tippy content='', placement=''></Tippy>
            -> đọc thêm props khác: https://atomiks.github.io/tippyjs/v5/all-props/
        - Cách lấy style của searchResult: https://youtu.be/6lB3HhjEr7E?t=764
            -> cách rất hay, tạo setTimeout debugger
        - over-fit cho img or video
        --> khó quá chả note được gì, xem code chia components thôi
    ** UI Header #3:
        - Tạo Components Button
            -> Xem cách tổ chức components, thay đổi thẻ khi truyền to, href
            -> Chú ý phần target="_blank" để mở trong trang mới
            -> trong Button className mới là tên class, chứ k phải classNames do gợi ý, đoạn này mất khá lâu fix đấy
            -> Chú ý từ bài trước mà quên k note: cứ tạo sẵn border vs màu transparent để khi cần border thì set thêm màu, tránh việc kích thước bị thay đổi
            -> Chú ý xử lý khi các nút cạnh nhau nữa: + .wrapper hoặc & + .wrapper
            -> Chú ý phần disabled: giảm opacity, pointer-events: none, user-select: none và phải xử lý logic: if(disabled) delete props.onClick nói riêng và các events khác nói chung (Object.key(props).forEach...)
            -> trick cho button rounded là bo góc số lớn như 999px sẽ tròn chứ k bị méo như 50%
            -> Xử lý ưu tiên primary hơn rounded bằng cách để primary css bên dưới rounded thay vì dùng !important để kết hợp primary vs rounded
            -> Sửa border khi hover vào để kết hợp outline vs rounded
            -> Xử lý thêm css cho class riêng: https://youtu.be/LPGQoWG7pno?t=2709, chý ý cách truyền [className]: className khác với các cách truyền props khác
            -> Cách thêm icon: chú ý css cách icon vs title
    ** UI Header #4:
        - Tạo MenuPopper:
            + Chú ý cách tách components, cách sử dụng Tippy placement: https://atomiks.github.io/tippyjs/#placements
            + Cách thêm className cho Popper: như bài trước Button ta làm { [className]: className } nhưng ta cũng có thể viết cx('any', className) với className như props được truyền vào
            + Tippy delay: number or [number, number] = [show, hide]
    ** UI Header #5:
        - Bổ sung lỗi phần trước: cursor cho more-btn, padding 2 bên inner của Header, ...
        - Tạo MenuPopper cấp 2: 
            -> Tạo header cho MenuPopper cấp 2, có title (đk show) và onBack
            -> áp dụng cho nhiều cấp hơn nữa, chú ý cách đặt tên key để liên tục truy cập vào cấp sâu hơn
    ** UI Header #6:
        - Khắc phục bài trước: blur ra khỏi MenuPopper để ẩn đi, nhưng khi hover (mở) lại thì vẫn ở lv cũ mà k reset về lv đầu
            -> dùng onHide của Tippy: https://youtu.be/VRpsvMwtdws?t=135
        - Tạo actions ở Header khi có user đăng nhập
            + Tạo các action-btn, bọc bởi Tippy, lưu ý 1 số attr như content, placeholder, trigger='click' để show khi click, delay, offset={[10, 10]}
                -> Tips để show ra cái tippy bị chặn k xem đc trên devtools: https://youtu.be/VRpsvMwtdws?t=966
                -> Tìm được rồi thì xem cách css Tippy: https://youtu.be/VRpsvMwtdws?t=1019
            + avatar
            + userMenu, chú ý cách tạo separate
                -> cách dịch menu so vs avatar: offset={[10, 10]}
    ** UI Header #7: 
        - Thay font family
            -> cách copy font từ network/Fonts: https://youtu.be/iyJ7b4_AdjQ?t=144
            -> Tạo fonts-face ... (chú ý src: '/assets') chứ k phải từ /src
            -> cài lại fonts: chú ý 1 số nút vẫn lỗi cần sửa thêm https://youtu.be/iyJ7b4_AdjQ?t=485
        - Thay Header icons
            -> ở video làm Upload icon, nhưng tiktok giờ k có icon đó nữa nên copy tạm từ github
            -> Chọn svg trên devtools rồi copy outerHTML, paste vào file: https://youtu.be/iyJ7b4_AdjQ?t=712
            -> sửa thành cú pháp jsx: class thành className, chuyển camelCase
            -> Chú ý riêng icon Message nó bị nhỏ hơn so vs cái khác, nên sẽ lỗi k hiển thị nếu set kích thước như cũ
        - Tạo Components Image
            + Cần ref: https://youtu.be/iyJ7b4_AdjQ?t=1089
            + Tạo default img: https://youtu.be/iyJ7b4_AdjQ?t=1257
                -> thử link tạo: https://placeholder.imageonline.co/
                -> trang nén ảnh: https://tinypng.com/
                -> components Image truyền src, alt vào rồi dùng để tránh warning
                -> Chú ý tạo state fallback, src={fallback || src} và hàm nhận lỗi onError
                -> Xử lý bị văng icon lỗi của ảnh (hỏi khó giải thích): https://youtu.be/iyJ7b4_AdjQ?t=1599
                -> Xử lý việc muốn truyền thêm fallback:
                    -> trùng tên thì đổi tên state, hoặc là dùng ES6 fallback (truyền vào) : customFallback để đổi tên nó đi
                    -> gán fallback: customFallback = images.noImage rồi handleError set bằng noImage
                ==> Tóm lại là ban đầu src ưu tiên lấy src truyền vài vì fallback(state) khởi tạo bằng '', nếu k load được src thì nhận onError và set bằng customFallback truyền vào (nếu k có thì nó bằng noImage tức giá trị default)
    ** Logic Header #1:
        - Nhiều chi tiết cần nhớ, xem kỹ video
        - Sửa AccountItem phần img thành Image
        - Tách code phần search trong header ra vì khi setState thì nó re-render những phần k cần thiết
            -> tách cả css, cả biến scss ra theo
        - Logic khi gõ chữ thì nút clear mới hiện:
            -> Cách 1 (trong video): khi searchValue truthy thì mới hiện
                {!!searchValue && (
                    <button className={cx('clear')} onClick={() => setSearchValue('')}>
                        <FontAwesomeIcon icon={faCircleXmark} />
                    </button>
                )}
            -> Cách 2: từ comment, khá hay, dùng CSS
                -> Vẫn tạo nút <button></button> chứa dấu clear đó, sao đó css:
                
                .clear {
                    display: none;
                }

                .search input:not(:placeholder-shown) ~ .clear {
                    display: block or flex; // ban đầu ẩn đi
                }
        - Thêm useRef để khi clear thì focus lại vào input
        - Logic khi hiện kết quả tìm kiếm, rồi khi click ra ngoài input thì popper ẩn đi, khi focus lại thì lại hiện kết quả cũ đó
            -> Thêm state showResult và dùng onClickOutside của Tippy: https://youtu.be/cgLkdc6Y8Zk?t=1613
            -> Dùng onClickOutside để set showResult = false khi click ra ngoài
            -> Dùng onFocus ở input để set lại showResult = true (nhớ tránh nhầm vs searchValue, searchResult đấy) 