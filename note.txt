- Video initiate: có cách sửa lỗi buộc dùng ssh key thay vì https, khi nào gặp thì xem: https://fullstack.edu.vn/learning/reactjs?id=0d56f3e5-e529-4dc2-bad7-3a7789204335
- Customize cra: https://fullstack.edu.vn/learning/reactjs?id=18bff2bc-6918-4ff6-af56-50a1c2d8398b
    + npm i -D customize-cra react-app-rewired
    + config-overrides.js
    + sửa package.json: https://github.com/timarney/react-app-rewired/#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts-for-start-build-and-test
- babel-plugin-module-resolver: tránh việc import '../../../.....' quá dài
        -> https://fullstack.edu.vn/learning/reactjs?id=a15493ae-8244-4f87-9861-6710af2c2b5a
        -> https://www.npmjs.com/package/babel-plugin-module-resolver
    + Cài: npm install --save-dev babel-plugin-module-resolver
    + tạo .babelrc
    + vấn đề import kiểu đó giống import thư viện nên config khác đi
    + config theo video: https://youtu.be/wwGkGi1WFgg?t=289
        -> sau import nó sẽ lấy từ root và chỉ cần '~/App' nếu config dấu '~'
        -> chú ý rằng ~ chỉ đại diện cho ./src nên giúp ta dễ import file ở ngay cấp 1 src từ file cấp sâu trong src thôi
        -> với kiểu ../../ vân vân thì ta nên đổi thành ~/ còn kiểu ./ thì thôi thay ~/ làm gì
    + Editors autocompletion: https://youtu.be/wwGkGi1WFgg?t=395
        -> jsconfig.json rồi config theo video
    + Nạp babelrc vào webpack: https://youtu.be/wwGkGi1WFgg?t=484
        -> sửa file config-overrides.js theo video và docs: https://github.com/arackaf/customize-cra/blob/master/api.md#usebabelrc
        -> chú ý có lỗi nhận nhầm thành hooks thì disable nó đi
- prettier: https://fullstack.edu.vn/learning/reactjs?id=4149692d-7c4b-4fca-b7d1-7cdf4a28c04a
    -> tạo .prettierrc rồi copy rule vào, như a sơn cũng được (đầy đủ hơn trong setting, sau nên chuyển rule trong setting ra file .prettierrc vào cd/~)
    -> Thêm .vscode/setting.json rồi thêm config vào
    ==> máy cá nhân setup hết rồi nên có thể k cần, nhưng làm nhóm thì cần
    ->> Chú ý để format all files cần phải cài prettier chứ k chỉ extension, rồi gõ lệnh theo link: https://stackoverflow.com/questions/43666270/how-do-i-format-all-files-in-a-visual-studio-code-project
    ->> Đồng thời xử lý format before commit: https://gist.github.com/estorgio/e8bcaa8e87d0fcdcf85fdf598956e34c
- Nên cài tailwindcss (cách cài và dùng trên trang chủ), nhớ cài kèm prettier-plugin-tailwindcss: https://tailwindcss.com/docs/editor-setup#automatic-class-sorting-with-prettier
- Cấu hình SASS/CSS:
    + Tạo components/GlobalStyles ...
    + Thêm <GlobalStyles></GlobalStyles> vào index.js
    + cài npm i -D sass
    + clear logo, index.css, App.css và import liên quan, để <h1>React App</h1> trong <App/> thôi
    + reset css: ta k code chay mà tải `npm install --save normalize.css`, link: https://github.com/necolas/normalize.css
        -> sau đó `@import 'normalize.css'` trong file GlobalStyles.scss
    + set Default:
        -> font: vào GlobalStyles @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');
        -> tạo body (trong GlobalStyles luôn) paste font-family vào: font-family: 'Roboto', sans-serif;
        -> Dùng kĩ thuật font-size 62.5% cho html rồi font-size 1.6rem cho body để trả lại (62.5% để tiện css kích thước theo rem)
        -> * { box-sizing: border-box, m0, p0 }
        -> Thêm line-height 1.5 và text-rendering: optimizeSpeed cho body (kiến thức mới)
        -> Thêm biến vào :root {} nếu cần
    ==> Tóm lại file GlobalStyles.scss có:
                @import 'normalize.css';
                @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');

                                :root {
                    --primary: #fe2c55;
                    --black: black;
                    --text-color: #333;
                    
                    // Default Layout
                    --default-layout-header-height: 60px;
                    --default-layout-width: 1150px;
                }

                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }

                html {
                    font-size: 62.5%;
                }

                body {
                    font-family: 'Roboto', sans-serif;
                    font-size: 1.6rem;
                    line-height: 1.5;
                    text-rendering: optimizeSpeed;
                }

                button, input, [tabindex] {
                    border: none;
                    outline: none;
                }

                a[href] { // có thẻ bỏ href đi, tránh xung đột với color của Button khi có to/href (thành thẻ a có href)
                    color: var(--text-color);
                    text-decoration: none;
                }

- Cấu hình Router/Layout:
    1. Phân tích layout chính: https://youtu.be/FwTQ0yoF0_g?t=106
    2. Cài đặt react-router-dom: `npm i react-router-dom`
        -> tạo pages/Home & Following như đã học bài Router
        -> Thêm Router vào (lần này thêm ở file App.js chứ k phải index.js): https://youtu.be/FwTQ0yoF0_g?t=508
    3. Đưa cấu hình routea ra ngoài: https://youtu.be/FwTQ0yoF0_g?t=613
        + Ít pages thì để x10 lên vẫn bth, tuy nhiên cần biết cách đưa ra ngoài
        + Tạo routes/index.js, trong đó chia publicRoutes và privateRoutes chia pages k cần và cần đăng nhập mới xem được, chú ý khi import các thứ nên dùng ~luôn đi để khi chuyển vị trí code đi sang file khác vẫn đúng
        + trong App import ra publicRoutes rồi map nó ra, -> xem video rõ hơn
    4. Xây dựng cơ chế tải layout
        + thêm folder Layout trong components có folder DefaultLayout chứa index.js kèm các folder Header, Sidebar, ...
        + xem video + code dễ hiểu hơn
        + tối ưu import Layout: https://youtu.be/FwTQ0yoF0_g?t=1215
        + Tiếp theo là setup layout trong App
        + set up page layout null -> Fragment
        + Tối ưu page upload còn chứa header nữa: https://youtu.be/FwTQ0yoF0_g?t=1521
            -> tự import header vào layout
            -> set layout trong routes/index.js là HeaderOnly
        => vấn đề cuối: HeaderOnly và DefaultLayout đều có foller Header -> components chung này k nên đưa vào src/components (nơi chứa các components chung dùng ở đâu cũng được) mà đưa vào src/components/Layout/components (chứa components chung của 2 layout đó thôi)

*** Xây dựng header:
    - cài `npm i classnames`, sau đó import ... from 'classnames/bind' trong file module.scss (chú ý /bind nếu k sẽ k work đâu)
        -> từ đó đặt cx = classNames.bind(styles) vào và ta có thể đặt <h2 className={cx('post-item')}></h2> hoặc nếu k vẫn có thể dùng ={style['post-item']} thôi
    - còn lại tự xem, chủ yếu css thôi

    ** UI header #1:
        - copy logo: https://youtu.be/hFK4okw-XYs?t=129
            -> tìm đến thẻ symbol với #... mà ta tìm đc ấy, xong copy outerHTML, xóa symbol, format là được
            -> tạo thêm assets/images/logo.svg rồi tạo index export ra. Chú ý logo: require('~/assets/images/logo.svg').default,
            -> cách lấy svg về thử: https://youtu.be/hFK4okw-XYs?t=459
        - Icons:
            -> link copy package fontawesome: https://fullstack.edu.vn/learning/reactjs?id=894b971b-3bc9-478e-ba01-ba4802213cc4#font-deps
                    "@fortawesome/fontawesome-svg-core": "^1.3.0",
                    "@fortawesome/free-brands-svg-icons": "^6.0.0",
                    "@fortawesome/free-regular-svg-icons": "^6.0.0",
                    "@fortawesome/free-solid-svg-icons": "^6.0.0",
                    "@fortawesome/react-fontawesome": "^0.1.17",
                -> thêm vào package.json dependencies rồi npm i
                -> Cách dùng: https://youtu.be/hFK4okw-XYs?t=1104
        - CSS header:
            + mã màu k nên để cứng mà nên đặt biến sau làm theme mới dễ
            + Đối với thẻ div mà chứa element ở 2 đầu thì nên padding 1 bên, chứ nếu k bị lệch: https://youtu.be/hFK4okw-XYs?t=1919
            + thêm vào GlobalStyles:
                    button, input, [tabindex] {
                        border: none;
                        outline: none;
                    }

                    a[href] {
                        color: var(--text-color);
                        text-decoration: none;
                    }
            + thuộc tính mới học: focus-within (nhận css khi nó hoặc thẻ con trong nó bị focus)
            + caret color
            -> Lưu ý scss có thể phân cấp nhưng k lạm dụng mà đâm sau quá 2 cấp, nên tách ra nếu sâu hơn để dễ bảo trì
            + css mới :not(:placeholder-shonw), dùng khi placeholder k được hiển thị (khi nhập): https://stackoverflow.com/questions/8639282/notempty-css-selector-is-not-working
    ** UI Header #2:
        - Cài tippy: `npm i @tippyjs/react` rồi đọc cách dùng: https://github.com/atomiks/tippyjs-react#-usage
            -> demo đoạn text bên dưới khi hover vào element: https://youtu.be/6lB3HhjEr7E?t=222
            -> <Tippy content='', placement=''></Tippy>
            -> đọc thêm props khác: https://atomiks.github.io/tippyjs/v5/all-props/
        - Cách lấy style của searchResult: https://youtu.be/6lB3HhjEr7E?t=764
            -> cách rất hay, tạo setTimeout debugger
        - over-fit cho img or video
        --> khó quá chả note được gì, xem code chia components thôi
    ** UI Header #3:
        - Tạo Components Button
            -> Xem cách tổ chức components, thay đổi thẻ khi truyền to, href
            -> Chú ý phần target="_blank" để mở trong trang mới
            -> trong Button className mới là tên class, chứ k phải classNames do gợi ý, đoạn này mất khá lâu fix đấy
            -> Chú ý từ bài trước mà quên k note: cứ tạo sẵn border vs màu transparent để khi cần border thì set thêm màu, tránh việc kích thước bị thay đổi
            -> Chú ý xử lý khi các nút cạnh nhau nữa: + .wrapper hoặc & + .wrapper
            -> Chú ý phần disabled: giảm opacity, pointer-events: none, user-select: none và phải xử lý logic: if(disabled) delete props.onClick nói riêng và các events khác nói chung (Object.key(props).forEach...)
            -> trick cho button rounded là bo góc số lớn như 999px sẽ tròn chứ k bị méo như 50%
            -> Xử lý ưu tiên primary hơn rounded bằng cách để primary css bên dưới rounded thay vì dùng !important để kết hợp primary vs rounded
            -> Sửa border khi hover vào để kết hợp outline vs rounded
            -> Xử lý thêm css cho class riêng: https://youtu.be/LPGQoWG7pno?t=2709, chý ý cách truyền [className]: className khác với các cách truyền props khác
            -> Cách thêm icon: chú ý css cách icon vs title
    ** UI Header #4:
        - Tạo MenuPopper:
            + Chú ý cách tách components, cách sử dụng Tippy placement: https://atomiks.github.io/tippyjs/#placements
            + Cách thêm className cho Popper: như bài trước Button ta làm { [className]: className } nhưng ta cũng có thể viết cx('any', className) với className như props được truyền vào
            + Tippy delay: number or [number, number] = [show, hide]
    ** UI Header #5:
        - Bổ sung lỗi phần trước: cursor cho more-btn, padding 2 bên inner của Header, ...
        - Tạo MenuPopper cấp 2: 
            -> Tạo header cho MenuPopper cấp 2, có title (đk show) và onBack
            -> áp dụng cho nhiều cấp hơn nữa, chú ý cách đặt tên key để liên tục truy cập vào cấp sâu hơn
    ** UI Header #6:
        - Khắc phục bài trước: blur ra khỏi MenuPopper để ẩn đi, nhưng khi hover (mở) lại thì vẫn ở lv cũ mà k reset về lv đầu
            -> dùng onHide của Tippy: https://youtu.be/VRpsvMwtdws?t=135
        - Tạo actions ở Header khi có user đăng nhập
            + Tạo các action-btn, bọc bởi Tippy, lưu ý 1 số attr như content, placeholder, trigger='click' để show khi click, delay, offset={[10, 10]}
                -> Tips để show ra cái tippy bị chặn k xem đc trên devtools: https://youtu.be/VRpsvMwtdws?t=966
                -> Tìm được rồi thì xem cách css Tippy: https://youtu.be/VRpsvMwtdws?t=1019
            + avatar
            + userMenu, chú ý cách tạo separate
                -> cách dịch menu so vs avatar: offset={[10, 10]}
    ** UI Header #7: 
        - Thay font family
            -> cách copy font từ network/Fonts: https://youtu.be/iyJ7b4_AdjQ?t=144
            -> Tạo fonts-face ... (chú ý src: '/assets') chứ k phải từ /src
            -> cài lại fonts: chú ý 1 số nút vẫn lỗi cần sửa thêm https://youtu.be/iyJ7b4_AdjQ?t=485
        - Thay Header icons
            -> ở video làm Upload icon, nhưng tiktok giờ k có icon đó nữa nên copy tạm từ github
            -> Chọn svg trên devtools rồi copy outerHTML, paste vào file: https://youtu.be/iyJ7b4_AdjQ?t=712
            -> sửa thành cú pháp jsx: class thành className, chuyển camelCase
            -> Chú ý riêng icon Message nó bị nhỏ hơn so vs cái khác, nên sẽ lỗi k hiển thị nếu set kích thước như cũ
        - Tạo Components Image
            + Cần ref: https://youtu.be/iyJ7b4_AdjQ?t=1089
            + Tạo default img: https://youtu.be/iyJ7b4_AdjQ?t=1257
                -> thử link tạo: https://placeholder.imageonline.co/
                -> trang nén ảnh: https://tinypng.com/
                -> components Image truyền src, alt vào rồi dùng để tránh warning
                -> Chú ý tạo state fallback, src={fallback || src} và hàm nhận lỗi onError
                -> Xử lý bị văng icon lỗi của ảnh (hỏi khó giải thích): https://youtu.be/iyJ7b4_AdjQ?t=1599
                -> Xử lý việc muốn truyền thêm fallback:
                    -> trùng tên thì đổi tên state, hoặc là dùng ES6 fallback (truyền vào) : customFallback để đổi tên nó đi
                    -> gán fallback: customFallback = images.noImage rồi handleError set bằng noImage
                ==> Tóm lại là ban đầu src ưu tiên lấy src truyền vài vì fallback(state) khởi tạo bằng '', nếu k load được src thì nhận onError và set bằng customFallback truyền vào (nếu k có thì nó bằng noImage tức giá trị default)
    ** Logic Header #1:
        - Nhiều chi tiết cần nhớ, xem kỹ video
        - Sửa AccountItem phần img thành Image
        - Tách code phần search trong header ra vì khi setState thì nó re-render những phần k cần thiết
            -> tách cả css, cả biến scss ra theo
        - Logic khi gõ chữ thì nút clear mới hiện:
            -> Cách 1 (trong video): khi searchValue truthy thì mới hiện
                {!!searchValue && (
                    <button className={cx('clear')} onClick={() => setSearchValue('')}>
                        <FontAwesomeIcon icon={faCircleXmark} />
                    </button>
                )}
            -> Cách 2: từ comment, khá hay, dùng CSS
                -> Vẫn tạo nút <button></button> chứa dấu clear đó, sao đó css:
                
                .clear {
                    display: none;
                }

                .search input:not(:placeholder-shown) ~ .clear {
                    display: block or flex; // ban đầu ẩn đi
                }
        - Thêm useRef để khi clear thì focus lại vào input
        - Logic khi hiện kết quả tìm kiếm, rồi khi click ra ngoài input thì popper ẩn đi, khi focus lại thì lại hiện kết quả cũ đó
            -> Thêm state showResult và dùng onClickOutside của Tippy: https://youtu.be/cgLkdc6Y8Zk?t=1613
            -> Dùng onClickOutside để set showResult = false khi click ra ngoài
            -> Dùng onFocus ở input để set lại showResult = true (nhớ tránh nhầm vs searchValue, searchResult đấy) 
    ** Logic Header #2: Kết nối search API của F8
        -> Xem phần đầu giới thiệu về API
        -> Sửa useEffect để sử dụng khi searchValue thay đổi
        -> fetch API lưu vào searchResult rồi trong Popper duyệt list in AccoutItem
        -> Chú ý trong useEffect thêm check searchValue trước khi truyền vào url fetch tránh query rỗng
        -> bug: + người dùng chỉ muốn tìm kết quả khi ngừng gõ lại, việc load các từ input khác là thừa, và đôi khi tìm kiếm thừa đó lại load xong sau kết quả mong muốn dẫn đến show sai cái cần: https://youtu.be/8b_H4onKXWc?t=1237
                + Nhập chuỗi rỗng bị lỗi vì BE trim() nó đi, như k nhập -> if (searchValue.trim())
                + Nhập ? hoặc &, ... gây lỗi url: dùng encodeURIComponent(searchValue) truyền vào ${} url api: https://youtu.be/8b_H4onKXWc?t=1457
        -> Xử lý loading:
                + Set loading = true trước khi fetch, fetch xong có res hoặc lỗi (catch) đều thành false
                + Set đk hiện icon loading và đồng thời ẩn icon clear đi
                + Thêm css quay cho loading, chú ý dùng transform nhưng có css cũ rồi phải điền lại, nếu k ghi đề k ăn
        -> Chú ý cách fake trạng thái rất hay: https://youtu.be/8b_H4onKXWc?t=1840
        -> Khi nhập xong rồi xóa đi thì phải thêm setSearchResult bằng mảng rỗng trước khi return kết thúc
        -> Click vào AccoutItem trong result chuyển trang cá nhân của người đó: https://youtu.be/8b_H4onKXWc?t=2023
            -> sửa div thành Link thêm display block (ban đầu là flex nên k sao), thêm to `/@${data.nickname}`
            -> sửa thêm routes: https://youtu.be/8b_H4onKXWc?t=2080
    ** Logic Header #3: Xử lý lỗi gửi request nhiều lần liên tục khi nhập -> debounce
        - Tạo src/hooks/useDebounce.js và cài đặt
            -> báo lỗi deps: https://youtu.be/ZoFl6gxRv6g?t=374, quickfix...
        - Sử dụng: ta gọi useDebounce ra và truyền searchValue kèm 500ms mới thay đổi state debounced, và truyền deps debounced vào useEffect để khi cập nhật lại debounced mới gọi api, và cả url fetch nữa
            -> https://youtu.be/ZoFl6gxRv6g?t=565
        -> Xem kĩ đoạn sau để hiểu cơ chế
*** Axios:
    - Xem từ trước đoạn này để hiểu công dụng và 1 số trang tương tự axios như supper agent: https://youtu.be/_zeOSnVHI2I?t=351
    - Chú ý xem cách dùng, nhưng lưu ý:
        + Ban đầu: 
                fetch(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
                    .then((res) => res.json())
        + Sau: (chú ý bỏ được đoạc convert parse js: (res) => res.json())
                axios.get(`https://tiktok.fullstack.edu.vn/api/users/search?q=${encodeURIComponent(debounced)}&type=less`)
            hoặc có thể tách query ra object làm tham số thứ 2 dạng param và k cần encodeURIComponent nữa, axios tự làm cho
            axios.get(`https://tiktok.fullstack.edu.vn/api/users/search`, {
                params: { q: debounced, type: 'less' },
            })
        ==> NHỚ: params có 's' chứ k phải param, mãi mới fix được
    - Quan trọng: res trả về lúc này k giống như trước gọi bằng fetch nữa mà nó có nhiều key, xem video hoặc clg ra nhìn, nên dữ liệu ta cần sẽ phải là
            res.data.data (data 1 là của axios trả về, hiểu đơn giản là res.data của axios mới là res của fetch trước dùng nên phải .data nữa)
            -> video: https://youtu.be/_zeOSnVHI2I?t=628
    - Tạo instance: docs https://github.com/axios/axios#creating-an-instance, video: https://youtu.be/_zeOSnVHI2I?t=1002
        -> Chú ý việc set baseURL có dấu '/' cuối đường dẫn k là tùy, nếu có thì phần gọi bỏ '/' ở đầu và ngược lại
    - Sửa res.data.data để gọn hơn: https://youtu.be/_zeOSnVHI2I?t=1261
        -> Chú ý phần import * as request thì request là đối tượng Module có key default và get (tại thời điểm trong video)
    - Dùng async await luôn trong file: https://youtu.be/_zeOSnVHI2I?t=1417
    - Tách thành file searchServices và gọi:
        -> Chú ý trong file là hàm async/await thì khi gọi hàm đó cũng phải thêm await (cũng như sync ở hàm gọi) nó mới đúng
    ==> Mẹo mở github.dev nhanh là đứng ở repos rồi gõ dấu '.' là được, k cần sửa đường dẫn thành dev -> nhưng là commit cuối
        -> commit chỉ định thì: https://youtu.be/_zeOSnVHI2I?t=2142

*** Sửa lỗi Header:
    ** Sửa và hoàn thiện Header #1
        - Thêm link trang chủ vào logo + căn giữa
        - Thêm config/routes.js để đặt link (chú ý src/routes chứa đường dẫn đi đâu, còn file này như để đặt tên để sau này sửa đường dẫn chỉ sửa 1 chỗ thay vì nhiều chỗ)
            -> rồi sửa ở routes/index.js
            -> Sửa các file khác: dùng Ctrl Shift F hoặc sidebar bên cạnh tìm (chú ý '/' và "/")
        - Sửa font ô search: nó chưa set font-family -> đặt thành biến rồi dùng
        - Ngăn nhập kí tự space là kí tự đầu tiên trong ô tìm kiếm
            -> Hướng là check kí tự đầu tiên nếu là cách thì k cho gõ cách nữa, else thì thôi
            -> Không đưa vào useEffect vì nó sẽ gọi rất nhiều lần, nên đưa vào onChange lúc setSearchValue ấy
            -> https://youtu.be/cZbm5P7V-iM?t=772
            -> Có vài cú pháp như sau: (chú ý TH là khi chỉ còn 1 kí tự hợp lệ xóa đi thành chuỗi rỗng phải xóa được nhé)
                + F8:       const searchValue = e.target.value;
                            if (!searchValue.startsWith(' ')) { // nếu k bắt đầu bằng space hoặc trim() nó đi là truthy (khác rỗng, null, ...) thì ok setSearchValue
                                setSearchValue(searchValue);
                            }
                + Comment:  const searchValue = e.target.value;
                            setSearchValue(searchValue.startsWith(' ') ? searchValue.trim() : searchValue);
                            -> cái này gần tương tự cái kia, tuy nhiên nên dùng trimStart() (nói bên dưới) thay cho trim() thì đúng hơn (à mà nó update liên tục nên k nếu gõ phần đầu là space thì đã trim() rồi k có chuyển phần sau có space đâu)
                + String.prototype: trimStart() sẽ loại bỏ các space ở đầu
                        -> có thêm cả trimEnd() nữa nếu cần
        - K hiện border khi focus vào nút submit (nút icon search ấy), còn nút input focus vào hiện border cụm search: https://youtu.be/cZbm5P7V-iM?t=1038
            -> Chú ý rằng, cơ chế là ta set focus-within cho cả cụm search nên việc nhấn vào btn-submit là hành vi mặc định, nên cần chặn lại
            -> Chú ý 2 là phải gọ onMouseDown chứ k phải onClick vì khi nhấn xuống đã focus rồi (e.preventDefault chứ k phải e.target nhé)
        - K ẩn menuUser (Tippy) khi click vào avatar: https://youtu.be/cZbm5P7V-iM?t=1269
            -> hideOnClick, nhưng lưu ý nên truyền dạng props mặc định false để nếu cần còn truyền true vào được
    ** Sửa và hoàn thiện Header #2:
        - Sửa thanh cuộn window khi nội dung dài: cho header thành fixed, đồng thời đẩy container bên dưới xuống 1 margin bằng header
            -> sửa background header k trong suốt nữa để khi cuộn window lên k bị thấy page home bên layer dưới: https://youtu.be/3dit5NJVxMU?t=246
            -> z-index cho header: tầm 10
        - Sửa thêm thanh cuộn UserMenu: https://youtu.be/3dit5NJVxMU?t=370
            -> Ban đầu để header của menu cùng cấp với data của nó, nên nếu cuộn sẽ cuộn cả header, fix thêm thẻ bọc lấy data trong nó
            -> Chú ý thẻ Popper_wrapper có max-height nhưng thẻ menu-body vừa tạo ôm data nó k theo height của cha, nên thêm dflex vào wrapper với direction column
            -> 1 vấn đề lần đầu gặp là flex nó co lại header do flex-shrink, sửa thành 0 cho header: https://youtu.be/3dit5NJVxMU?t=639
        - Thay đổi hình dáng kích thước thanh cuộn chung
            -> Chú ý thuộc tính overflow-y có auto và mới là overlay (tức nổi lên, như auto hay scroll thì nó đẩy content sang bằng width của nó còn overlay nó nổi lên, nên k chiếm width luôn)
            -> CSS cho scrollbar: chú ý có thumb + track = scrollbar, cái này có note 1 ảnh, hoặc tham khảo tương tự như input range
            -> Cách copy css tiktok cho scrollbar: https://youtu.be/3dit5NJVxMU?t=1011
            -> Tham khảo thêm nếu muốn userMenu cũng overlay thay vì auto: https://youtu.be/3dit5NJVxMU?t=1123
        - Sửa title trang + favicon -> sửa ở file index.html
            -> cách tìm và copy favicon: https://youtu.be/3dit5NJVxMU?t=1299
                + tìm ở source(Ctrl U) hoặc mở tab <head></head> rồi search 'favicon'
                + vào network img, chuột phải vào nút reload trình duyệt chọn cái cuối 'Empty cache and hard reload'
                    -> hoặc media, manifest, ...
                + hoặc tìm bằng 'tiktok.com/favicon.ico' -> tải về hoặc link, nhưng f8 dạy tải về và đặt luôn ở thư mục public
        - Fix warning Tippy: xem giải thích: https://youtu.be/3dit5NJVxMU?t=1515
            -> đại loại là nó sẽ thêm 1 thẻ div vào cha của nó, và dễ nổi bọt rồi gây ảnh hưởng thẻ cha, nên nó nhắc nên thêm hẳn vào sau root (xem kĩ video đoạn giải thích)
            -> Chú ý đoạn này, truyền {...passProps} nhưng gọi nó ở đầu vì nếu ở cuối sẽ ghi đè hết các phần trước, xem đoạn này: https://youtu.be/3dit5NJVxMU?t=1714
            -> Chú ý sửa phần search nhé k phải userMenu
            => tóm lại thêm appendTo={() => document.body} vào phần tippy của Search
            -> Lỗi khác: https://youtu.be/3dit5NJVxMU?t=1875 giật giật khi cuộn
                -> bọc thêm 1 thẻ nữa cho cả phần return trước đó: https://youtu.be/3dit5NJVxMU?t=1942
    ** Tái cấu trúc và tối ưu code #1:
        - apiServices -> services, searchServices -> searchServices
            -> Chú ý nếu nó hỏi auto update thì yes, k thì sửa chay bằng Ctrl Shift F rồi replace bằng thanh bên dưới: https://youtu.be/9KIub8JNcXg?t=304
        - Layout ra ngoài, sửa thành layouts (chữ thường và thêm s)
        - Thêm file index.js trong config để dễ import nhiều config khác: https://youtu.be/9KIub8JNcXg?t=659
        - Muốn import DefaultLayout thay vì {DefaultLayout} : https://youtu.be/9KIub8JNcXg?t=1029
            -> ở layouts/index.js: export {default, default as DefaultLayout} from ...
            -> export kiểu như trên tức là ta có thể import DefaultLayout hoặc {DefaultLayout} đều được nhé
        - Sửa utils/request thành utils/httpRequest luôn: https://youtu.be/9KIub8JNcXg?t=1201
        - Tạo file env (environment)
            + Có nhiều môi trường, tham khoản trước đoạn này xíu: https://youtu.be/9KIub8JNcXg?t=1361
            -> thêm .env.development rồi thêm base tiktok (dùng trong utils/httpRequest) vào (để string hay link bth cũng được hết)
            -> Dùng process.env rồi .REACT_APP_BASE_URL mà dùng
    ** PropTypes: dùng create react app thì k cần i nữa
        - Chú ý là import PropTypes from 'prop-types' nhé, đừng nhầm với lib khác vì nó gợi ý k đúng
            -> Dùng vs AccountItem: https://youtu.be/_azdqV1MoXE?t=206
        - PropTypes.node: https://youtu.be/_azdqV1MoXE?t=314
            -> những thứ render được: numbers, strings, elements, array, ...
            -> những thứ k được: function, ...
            -> Dùng với Button children là PropTypes.node
        - PropTypes sẽ báo lỗi nếu nhập sai, trong TH k nhập k báo lỗi
            -> muốn bắt buộc điền vào thì dùng .isRequired
        - Tham khảo thêm phần Usage: https://www.npmjs.com/package/prop-types
            + .element, .elementType, .instanceOf, .oneOf, .oneOfType, arrayOf, ...
            + kết hợp như: .func.isRequired, .any.isRequired
    ** Áp dụng PropTypes: 
        - impt để import nhanh (có 1 số extension snippet cho react có thể generate ra cả ffc với propTypes, kèm gõ nhanh các loại PropTypes nữa)
            -> Cơ mà đa số extention snippets đều gộp chung với các cái khác như reactjs, reactnative, redux, ... k cần thiết, hoặc snippet nhưng khó hiểu khó nhớ, k theo ý
            -> Tự custom thêm snippet cần dùng và theo ý của mình là được
        - Sửa các components thêm propTypes: https://youtu.be/UbhnlxLWXZU?t=90
            -> AccountItem, Button, GlobalStyles, Image, Popper/Wrapper.js, Menu/Header + Menu/index + Menu/MenuItem, DefaultLayout 
            -> nhớ key là className chứ k có key classNames đâu nhé, cứ nhầm mãi, Tabnine ml toàn gợi ý k đúng
            -> Sửa phần title của header trong UserMenu (ban đầu cố định là language) -> sửa thành current.title là được (vì current luôn là history[history.length - 1] và nếu nó là cấp con nó sẽ có title)
        - Chỉ muốn 1 children thì dùng kiểu React.Children.only(children), https://youtu.be/UbhnlxLWXZU?t=320
    ** Sửa lỗi nhiều file index.js
        - Sửa file index cũ thành file theo folder -> khi import lại xấu
        - Vẫn sửa file index cũ, song lại thêm file index.js nữa trong folder đó chỉ để export {default} ... thôi -> tốn nhiều file
            -> mà nếu sửa vậy khi vscode hỏi auto update import thì cứ chọn No vì chả đổi import đâu
            -> Các components sửa lại, trừ 1 số cái k export default như Icons, ...
        - Với những folder k export default thì k làm như trên được, mà phải export { những cái export ra } from ... hoặc chỉ cần export * from ...
            -> Tuy nhiên tốt nhất nên export * bởi vì sau này nếu thêm cái cần export đỡ mất công vào file index.js sửa nữa
            -> VD Icons, routes
    ** Tối ưu code Header phần cuối:
        - Ô search khi text dài bị nó close absolute che đi: https://youtu.be/J-6vcwggqGQ?t=51
            -> padding right tầm 40px cho thẻ input là được
        - Button khi thêm to/href vào thì color lại ăn theo text color ở GlobalStyles: https://youtu.be/J-6vcwggqGQ?t=193
            -> do độ ưu tiên của a[href] cao hơn Button_primary, => có 2 cách 1 là giảm ưu tiên thẻ a bỏ href đi, 2 là thêm important vào css primary
            -> a[href] là thẻ a chứa href mới nhận css, nhưng thực ra đa phần dùng a là có href rồi nên chọn cách 1 cũng được
               và k chỉ primary mà các styles khác như outline, rounded, ... đều bị css như vậy nên important phải sửa nhiều
        - Phần css scrollbar css thừa (bị duplicate)
        - Review lại các components
            - Trong file Menu.js, hàm render của Tippy nếu dùng useCallback nhưng k chắc Components Tippy có dùng useMemo không thì cũng k được gì
                -> Video nói về phần này: https://youtu.be/J-6vcwggqGQ?t=573
                -> Với cả phần userMenu đó k render lại quá nhiều mà tốn hiệu năng, có thể k cần xử lý
                + Trong video vẫn tách phần render của Tippy ra hàm riêng, cho gọn thôi chứ cũng k dùng useCallback
                + Tách onHide ra hàm riêng (phần xử lý khi tắt thì về Menu trang đầu chứ k đứng mãi ở trang đã tắt như Language): https://youtu.be/J-6vcwggqGQ?t=668
                + Tách thêm 1 số hàm khác...
                    ->  Lưu ý file Menu k nên dùng useCallback, useMemo vì có 1 state mà nó dùng ở gần hết file, nên kiểu gì state thay đổi cũng thay đổi gần hết, useCallback k được gì đâu
            - Tách phần render của Tippy trong Search ra nếu nhiều: https://youtu.be/J-6vcwggqGQ?t=1354
*** Xây dựng Sidebar:
    ** Xây dựng UI Sidebar #1:
        - Move components Sidebar ra ngoài layouts/components vì dùng nhiều
        - Thêm Components Menu chứa các MenuItem là các cụm For you, Following, Live
            -> Chú ý MenuItem nhỏ thì có thể gộp cả vào folder Menu k cần tách thêm folder riêng vs scss riêng
            -> file Menu/index export {default} from './Menu' luôn k cần as, as cho MenuItem thôi
            -> MenuItem chứa các link đến đường dẫn, click vào đổi màu nên phải dùng NavLink thay vì Link (cùng của react-router-dom)
                -> Giờ mới dạy :<, k biết cái này sớm
                -> NavLink nó sẽ tự thêm class active vào thẻ khi đường dẫn trùng với to đc set, tuy nhiên nó là class thuần k phải module css, 
                -> Cách chuyển active sang module với NavLink: NavLink của react-router v6 cho phép truyền callback vào className, và ta có đối tượng được truyền vào, có hàm isActive
                    -> className={(nav) => cx('menu-item', { active: nav.isActive }) // hoặc để 'active' thay active cũng được -> css thôi
                    -> Vấn đề nữa: ta có đường dẫn '/' và '/following' thì khi bắt following nó vẫn nhận home là active, vì vậy ngoài thuộc tính to ta phải thêm end vào để nó bắt chính xác '/' thôi chứ k bắt đường dẫn con của nó
                    -> Tham khảo cuối link https://reactrouter.com/en/6.4.1/components/nav-link
        - Css cho Menu: 
            + Chú ý mẹo: các MenuItem đứng 1 hàng ấy, dùng df cho MenuItem là nó xuống hết, chứ bth mình phải df cho cả Menu rồi f-direction column thừa thãi, vì flex là nó như block chiếm 1 hàng rồi
            + css cho active NavLink: config module như note bên trên rồi set color sẽ bắt cho cả text và icon thôi 
            + Icon tiktok nó có trước và sau active còn solid vs regular, ta phải copy chay thêm các icon active nữa
                -> Chú ý khác viewport vs viewBox
            -> Sửa MenuItem thêm prop activeIcon và xử lý logic xem hiện icon nào: bằng css 
                -> mặc định hiện icon và ẩn activeIcon, khi thẻ có thêm class .avtive thì đảo lại hiện activeIcon và ẩn icon
                -> sửa các icon df để tránh lệch: https://youtu.be/I6DWZWkAhhY?t=2541
            + Thêm page/Live, config file routes dẫn đến trang page dạng DefaultLayout
    ** Xây dựng UI Sidebar #2: 
        - Tạo SuggestedAccount và AccountItem bên trong, chú ý rằng AccountItem nhỏ nên viết chung thì k được đặt thẻ bọc là wrapper nữa, gây rối
        - Có thể dùng opacity set mã màu hex 8 số: https://youtu.be/-5jFoaGqcF8?t=1422, khá hay
        - Chú ý css kích thước icon là dùng font-size chứ k phải set width, height nhé, trước đã note rổi mà ít làm nên quên đó
        - Copy màu của icon (dạng sgv): copy phần fill ấy: https://youtu.be/-5jFoaGqcF8?t=1514
    ** Xây dựng UI Sidebar #3:
        - Tạo Tippy khi hover vào AccountItem: chú ý có delay show nhé (hover khi dừng lại mới hiện)
            -> Chú ý bọc thẻ div bên ngoài HeadlessTippy tránh warning
        - Chú ý hàm render của Tippy: có cái tabIndex:
            -> link tabIndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
            -> đại loại là tabIndex cho ta thứ tự khi gõ tab nó chuyển đến, k có thuộc tính tabIndex hoặc có những bằng -1 hoặc âm thì k tab vào được (nhưng vẫn thêm bằng -1 vì với 1 số loại như input k có tabIndex vẫn tab vào dược)
        - Tách AccountPreview:
            -> ...
            -> À có mẹo gõ font-size là fz sẽ k bị trùng
            -> Children của components có thể để dấu cách phần cách được k như html, vd <Button>a </Button> là thêm dấu cách sau a
        -> Tippy còn hay ở chỗ dưới k đủ chỗ thì hiện lên trên, tương tự với các hướng khác :D